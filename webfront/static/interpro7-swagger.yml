openapi: 3.0.0
info:
  title: InterPro7 API
  description: |
    Programatic access of all the InterPro entries and its related entities.

    Currently there are 6 main endpoints: entry, protein, structure, taxonomy, proteome and set.

    The decription below refers to each of the endpoints indepndantly. However the API supports the combination of the endpoint.

    For example a URL `/entry/interpro` provides a pageable list of all the interpro entries. And the URL `/protein/uniprot/p99999` retrieves all the details of the protein identified ith the uniprot accession P99999.

    The combined URL `/entry/interpro/protein/uniprot/p99999` will list all the interpro entries that have a match in that particular protein.
  version: 0.0.1
servers:
  - url: https://www.ebi.ac.uk/interpro/api/
    description: Live server
  - url: https://wwwdev.ebi.ac.uk/interpro/api/
    description: Dev server
  - url: http://localhost:8007/api/
    description: Local server
paths:
  /entry:
    get:
      summary: Returns the overview counters of the InterPro entries.
      tags:
        - Entry
      parameters:
        - $ref: "#/components/parameters/entryGroupBy"
        - $ref: "#/components/parameters/entryIntegrated"
        - $ref: "#/components/parameters/entryType"
        - $ref: "#/components/parameters/entryGoCategory"
        - $ref: "#/components/parameters/entryGoTerm"
        - $ref: "#/components/parameters/entryIdaSearch"
        - $ref: "#/components/parameters/entryIdaIgnore"
        - $ref: "#/components/parameters/entryIdaOrdered"
        - $ref: "#/components/parameters/entryIdaExact"
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"

  /entry/{sourceDB}:
    get:
      summary: Returns a list of the entries in the selected DB.
      tags:
        - Entry
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: Either a member database, interpro or one of the wildcards- all, integrated, unintegrated
          schema:
            $ref: "#/components/schemas/EntryDB"
        - $ref: "#/components/parameters/entryGroupBy"
        - $ref: "#/components/parameters/entrySortBy"
        - $ref: "#/components/parameters/entryIntegrated"
        - $ref: "#/components/parameters/entryAnnotation"
        - $ref: "#/components/parameters/entryType"
        - $ref: "#/components/parameters/entryGoCategory"
        - $ref: "#/components/parameters/entryGoTerm"
        - $ref: "#/components/parameters/entryInterproStatus"
        - $ref: "#/components/parameters/entryInterproLatest"
        - $ref: "#/components/parameters/entrySignatureIn"
        - $ref: "#/components/parameters/entryExtraFields"
      responses:
        $ref: "#/components/responses/ListAndErrors"
  /entry/{sourceDB}/{accession}:
    get:
      summary: Returns and object of the selected Entry
      tags:
        - Entry
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: Either a member database, interpro or one of the wildcards (e.g. all)
          schema:
            $ref: "#/components/schemas/EntryDB"
        - name: accession
          in: path
          required: true
          description: The accession of the Entry to retrieve
          schema:
            type: string
          example: "IPR000001"
        - $ref: "#/components/parameters/entryIDA"
        - $ref: "#/components/parameters/entryInteractions"
        - $ref: "#/components/parameters/entryPathways"
        - $ref: "#/components/parameters/entryAnnotationMemberDB"
        - $ref: "#/components/parameters/entryExtraFields"
        - $ref: "#/components/parameters/entryAFmodel"
        - $ref: "#/components/parameters/entrySubfamilies"
        - $ref: "#/components/parameters/entrySubfamily"
        #- $ref: "#/components/parameters/entryModelMemberDB" needs to change from ':' to '='
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

  /protein:
    get:
      summary: Returns the overview counters of the Proteins in our DB.
      tags:
        - Protein
      parameters:
        - $ref: "#/components/parameters/proteinGroupBy"
        - $ref: "#/components/parameters/proteinTaxID"
        - $ref: "#/components/parameters/proteinMatchPresence"
        - $ref: "#/components/parameters/proteinIsFragment"
      #        - $ref: '#/components/parameters/proteinEvidence'
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"
  /protein/{sourceDB}:
    get:
      summary: Returns a list of the proteins in the selected DB.
      tags:
        - Protein
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The wild card 'uniprot' shows all the proteins, or it can be filtered by reviewed or unreviewed.
          schema:
            $ref: "#/components/schemas/ProteinDB"
        - $ref: "#/components/parameters/proteinGOTerm"
        - $ref: "#/components/parameters/proteinListIDA"
        - $ref: "#/components/parameters/proteinID"
        - $ref: "#/components/parameters/proteinTaxID"
        - $ref: "#/components/parameters/proteinMatchPresence"
        - $ref: "#/components/parameters/proteinIsFragment"
        - $ref: "#/components/parameters/proteinExtraFields"
        - $ref: "#/components/parameters/proteinGroupBy"

      responses:
        $ref: "#/components/responses/ListAndErrors"
  /protein/{sourceDB}/{accession}:
    get:
      summary: Returns and object of the selected protein
      tags:
        - Protein
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The wild card 'uniprot' shows all the proteins, or it can be filtered by reviewed or unreviewed.
          schema:
            $ref: "#/components/schemas/ProteinDB"
        - name: accession
          in: path
          required: true
          description: The accession of the protein to retrieve
          schema:
            type: string
          example: "P99999"
        - $ref: "#/components/parameters/proteinIDA"
        - $ref: "#/components/parameters/proteinResidues"
        - $ref: "#/components/parameters/proteinStructureinfo"
        - $ref: "#/components/parameters/proteinExtraFeatures"
        - $ref: "#/components/parameters/proteinIsoforms"
        - $ref: "#/components/parameters/proteinConservation"
        - $ref: "#/components/parameters/proteinExtraFields"
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

  /structure:
    get:
      summary: Returns the overview counters of the structures in the database.
      tags:
        - Structure
      parameters:
        - $ref: "#/components/parameters/structureGroupBy"
        #        - $ref: '#/components/parameters/structureResolution'
        - $ref: "#/components/parameters/structureExperimentType"
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"
  /structure/{sourceDB}:
    get:
      summary: Returns a list of the structure in the selected DB.
      tags:
        - Structure
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The wild card 'uniprot' shows all the proteins, or it can be filtered by reviewed or unreviewed.
          schema:
            type: string
            enum: ["pdb"]
        - $ref: "#/components/parameters/structureResolution"
        - $ref: "#/components/parameters/structureExperimentType"
        - $ref: "#/components/parameters/structureGroupBy"
        - $ref: "#/components/parameters/structureExtraFields"
      responses:
        $ref: "#/components/responses/ListAndErrors"
  /structure/{sourceDB}/{accession}:
    get:
      summary: Returns an object with the detail of the selected Structure
      tags:
        - Structure
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The only supported database for structure is PDB.
          schema:
            type: string
            enum: ["pdb"]
        - name: accession
          in: path
          required: true
          description: The accession of the Structure to retrieve
          schema:
            type: string
          example: "101m"
        - $ref: "#/components/parameters/structureExtraFields"
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

  /taxonomy:
    get:
      summary: Returns the overview counters of the taxonomy in the database.
      tags:
        - Taxonomy
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"
  /taxonomy/{sourceDB}:
    get:
      summary: Returns a list of the taxa in the selected DB.
      tags:
        - Taxonomy
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The only supported database for taxonomy is UniProt.
          schema:
            type: string
            enum: ["uniprot"]
        - $ref: "#/components/parameters/taxonomyKeySpecies"
        - $ref: "#/components/parameters/taxonomyExtraFields"
      responses:
        $ref: "#/components/responses/ListAndErrors"
  /taxonomy/{sourceDB}/{accession}:
    get:
      summary: Returns an object with the details of the selected Taxon
      tags:
        - Taxonomy
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The only supported database for taxonomy is UniProt.
          schema:
            type: string
            enum: ["uniprot"]
        - name: accession
          in: path
          required: true
          description: The accession of the Taxon to retrieve
          schema:
            type: integer
          example: 9606
        - $ref: "#/components/parameters/taxonomyWithNames"
        - $ref: "#/components/parameters/taxonomyFilterByEntry"
        - $ref: "#/components/parameters/taxonomyFilterByEntryDB"
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

  /proteome:
    get:
      summary: Returns the overview counters of the Proteome in the database.
      tags:
        - Proteome
      #      parameters: Removed as all proteomes included in InterPro are reference.
      #        - $ref: '#/components/parameters/proteomeGroupBy'
      #        - $ref: '#/components/parameters/proteomeIsReference'
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"
  /proteome/{sourceDB}:
    get:
      summary: Returns a list of the Proteomes in the selected DB.
      tags:
        - Proteome
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The only supported database for Proteome is UniProt.
          schema:
            type: string
            enum: ["uniprot"]
        - $ref: "#/components/parameters/proteomeExtraFields"
      responses:
        $ref: "#/components/responses/ListAndErrors"
  /proteome/{sourceDB}/{accession}:
    get:
      summary: Returns an object with the details of the selected Proteome
      tags:
        - Proteome
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: The only supported database for Proteome is UniProt.
          schema:
            type: string
            enum: ["uniprot"]
        - name: accession
          in: path
          required: true
          description: The accession of the Proteome to retrieve
          schema:
            type: string
          example: "up000000211"
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

  /set:
    get:
      summary: Returns the overview counters of the set in the database.
      tags:
        - Sets
      responses:
        $ref: "#/components/responses/AggregationsAndErrors"
  /set/{sourceDB}:
    get:
      summary: Returns a list of the sets in the selected DB.
      tags:
        - Sets
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: Currently we have sets of entries from pfam and cdd.
          schema:
            type: string
            enum: ["all", "cdd", "pfam"]
        - $ref: "#/components/parameters/setExtraFields"
      responses:
        $ref: "#/components/responses/ListAndErrors"
  /set/{sourceDB}/{accession}:
    get:
      summary: Returns an object with the details of the selected set.
      tags:
        - Sets
      parameters:
        - name: sourceDB
          in: path
          required: true
          description: Currently we have sets of entries from pfam and cdd.
          schema:
            type: string
            enum: ["all", "cdd", "pfam"]
        - name: accession
          in: path
          required: true
          description: The accession of the set to retrieve
          schema:
            type: string
          example: "cl0001"
        - $ref: "#/components/parameters/setAlignments"
      responses:
        $ref: "#/components/responses/MetadataAndErrors"

components:
  schemas:
    MemberDB:
      type: string
      enum:
        - cathgene3d
        - hamap
        - panther
        - pirsf
        - prints
        - prosite
        - profile
        - pfam
        - prodom
        - smart
        - ssf
        - ncbifam
        - cdd
        - sfld
    EntryDB:
      type: string
      enum:
        - InterPro
        - all
        - unintegrated
        - integrated
        - cathgene3d
        - hamap
        - panther
        - pirsf
        - prints
        - prosite
        - profile
        - pfam
        - prodom
        - smart
        - ssf
        - ncbifam
        - cdd
        - sfld
    EntryType:
      type: string
      enum:
        - homologous_superfamily
        - family
        - domain
        - repeat
        - conserved_site
        - binding_site
        - active_site
        - ptm
    ProteinDB:
      type: string
      enum:
        - reviewed
        - unreviewed
        - uniprot
  parameters:
    entryGroupBy:
      name: group_by
      in: query
      description: |
        Groups the current selection of entries by the given parameter, and counts the unique entries for each group.

        **Note:** The valid values for the parameter to group by changes depending of the context:
          * `/entry`:
            * `type`, `source_database`, `tax_id`, `go_terms`
          * `/entry/all`:
            * `type`, `source_database`, `tax_id`, `go_terms`
          * `/entry/integrated`:
            * `type`, `source_database`, `tax_id`, `go_terms`
          * `/entry/unintegrated`:
            * `type`, `source_database`, `tax_id`, `go_terms`
          * `/entry/interpro`:
            * `type`, `tax_id`, `source_database`, `member_databases`, `go_terms`, `go_categories`
          * `/entry/{sourceDB}`:
            * `type`, `tax_id`, `source_database`, `go_terms`, `go_categories`

        **Note:** This parameter changes the output's format.

        **Note:** This parameter might not play along with other parameters.
      schema:
        type: string
        enum:
          - type
          - source_database
          - tax_id
          - member_databases
          - go_terms
          - go_categories
    entrySortBy:
      name: sort_by
      in: query
      description: Order the entries using the option selected
      schema:
        type: string
        enum:
          - accession
          - integrated
    entryIntegrated:
      name: integrated
      in: query
      description: Filters the entries that are integrated with the given interPro accession
      schema:
        type: string
        pattern: '^[Ii][Pp][Rr]\d{6}$'
    entryType:
      name: type
      in: query
      description: Filter entries by its entry type
      schema:
        $ref: "#/components/schemas/EntryType"
    entryGoCategory:
      name: go_category
      in: query
      description: 
        Filter the entries tha belong to one of the high level GO categories. Use P for Biological Process, F for Molecular Function, and C for Cellular Component.
       
        **Note:** This only works if the sourceDB selected is InterPro.
      schema:
        type: string
        enum: ["P", "F", "C"]
    entryGoTerm:
      name: go_term
      in: query
      description: Filters the entries that have been annotated with the given GO term.
      schema:
        type: string
        pattern: '^[Gg][Oo]:\d{7}$'
    entryAnnotation:
      name: annotation
      in: query
      description: Filters the entries to those which have an annotation of the given type
      schema:
        type: string
        enum:
          - logo
          - alignment
          - hmm
    entryIdaSearch:
      name: ida_search
      in: query
      description: |
        Search by InterPro Domain Architecture (IDA).

        Include a comma separated list of the domains accessions(InterPro or Pfam) to be included in the IDA.

        **Note:**  When using this parameter, the response won't include the aggregated counts of `/entry` and parameters not related with IDA search will be ignored.

        **Note:**  To get the full list of IDA check the `Send empty value` option.
      schema:
        type: string
      allowEmptyValue: true
    entryIdaIgnore:
      name: ida_ignore
      in: query
      description: |
        Ignore domains When doing a Search by InterPro Domain Architecture (IDA).

        Comma separated list of PFam or interprodomains to ignore.

        **Note:** This parameter only works when `ida_search` is also present.
      schema:
        type: string
    entryIdaOrdered:
      name: ordered
      in: query
      description: |
        Establish that the domains to search using `ida_search` should be in order

        **Note:** This parameter only works when `ida_search` is also present.
      schema:
        type: string
        enum:
          - ordered
    entryIdaExact:
      name: exact
      in: query
      description: |
        Establish that the domains to search using `ida_search` should be exact.

        Only the domains included in `ida_search` will be included and they will be in the exact order.

        **Note:** This parameter only works when `ida_search` and `ordered` are also present.
      schema:
        type: string
        enum:
          - exact
    entryInterproStatus:
      name: interpro_status
      in: query
      description: |
        counts how many entries in the selection are integrated and how many are not.

        **Note:** This only works if the sourceDB selected is a member Database.
      schema:
        type: string
        enum:
          - interpro_status
    entrySignatureIn:
      name: signature_in
      in: query
      description: |
        Filters InterPro entries to those that have a match with the given memberDB

        **Note:** This only works if the sourceDB selected is InterPro.
      schema:
        $ref: "#/components/schemas/MemberDB"
    entryInterproLatest:
      name: latest_entries
      in: query
      description: |
        List of the latest entries registered in Interpro. Based in the Release Notes.

        **Note:** This modifier doesn't operates in combination with other parameters.

        **Note:** This only works if the sourceDB selected is InterPro.
      schema:
        type: string
        enum:
          - latest_entries
    entryExtraFields:
      name: extra_fields
      in: query
      description: Includes the value of the selected fields
      schema:
        type: string
        style: form
        allowReserved: true
        explode: false
        enum:
          - counters
          - entry_id
          - short_name
          - description
          - wikipedia
          - literature
          - hierarchy
          - cross_references
          - entry_date
          - is_featured
          - overlaps_with
    entryIDA:
      name: ida
      in: query
      description: |
        Returns a list of the domain architectures that contain this entry.

        **Note:** This modifier doesn't operates in combination with other parameters.

        **Note:** This only works if the sourceDB selected is InterPro or pfam.

        **Note:** This modifier doesn't require parameters, check `Send empty value` to use it.
      schema:
        type: string
      allowEmptyValue: true
    entryInteractions:
      name: interactions
      in: query
      description: |
        Returns a list of interactions reported for the selected entry.

        **Note:** This only works if the sourceDB selected is InterPro.

        **Note:** This modifier doesn't operates in combination with other parameters.
      schema:
        type: string
        enum:
          - interactions
    entryPathways:
      name: pathways
      in: query
      description: |
        Returns a list of pathways reported for the selected entry.

        **Note:** This only works if the sourceDB selected is InterPro.

        **Note:** This modifier doesn't operates in combination with other parameters.
      schema:
        type: string
        enum:
          - pathways
    entryAnnotationMemberDB:
      name: annotation
      in: query
      description: |
        Extra annotations provided by the member database about this entry

        **Note:** This only works if the sourceDB selected is a member DB.

        **Note:** This modifier doesn't operates in combination with other parameters.
      schema:
        type: string
        enum:
          - logo
          - hmm
          - alignment
    entryAFmodel:
      name: has_model
      in: query
      description: |
        Returns a list of proteins with/without an AlphaFold prediction for the InterPro entry selected

        **Note:** This parameter only works when the sourceDB selected is InterPro.

         **Note: ** This modifier doesn't operates in combination with other parameters.

      schema:
        type: boolean
    entrySubfamilies:
      name: subfamilies
      in: query
      description: |
        Panther families have subfamilies associated with each match. This modifier lists the subfamilies 
        linked to the current entry.
        If the attribute has a value (e.g. `subfamilies=PTHR10015:SF361`) the list will be filtered by that ID.

        **Note:** This parameter only works when the sourceDB selected is panther.

         **Note: ** This modifier doesn't operates in combination with other parameters.

      schema:
        type: string
    entrySubfamily:
      name: subfamily
      in: query
      description: |
        Panther families have subfamilies associated with each match. This modifier indicates that the given 
        accession belongs to a subfamily intead of an entry. For example `/entry/panther/PTHR10015:SF361?subfamily`
        
        **Note:** This parameter only works when the sourceDB selected is panther.

         **Note: ** This modifier doesn't operates in combination with other parameters.

      schema:
        type: string
    entryModelMemberDB:
      name: model
      in: query
      description: |
        Structural model information from RoseTTAFold.

        **Note:** This parameter only works when the sourceDB selected is InterPro or Pfam.

        **Note:** This modifier doesn't operates in combination with other parameters.
      schema:
        type: string
        enum:
          - structure
          - contacts
          - lddt

    proteinGroupBy:
      name: group_by
      in: query
      description: |
        Groups the current selection of proteins by the given parameter, and counts the unique proteins for each group.

        **Note:** This parameter changes the output's format.

        **Note:** This parameter might not play along with other parameters
      schema:
        type: string
        enum:
          - tax_id
          - source_database
          - go_terms
          - match_presence
          - is_fragment
    proteinTaxID:
      name: tax_id
      in: query
      description: Filters the proteins that belong to this taxonomy id. It doesn't search in its lineage.
      schema:
        type: number
    proteinEvidence:
      name: protein_evidence
      in: query
      description: Filters the proteins that have an evidence code equal to the one in the parameter.
      schema:
        type: number
    proteinMatchPresence:
      name: match_presence
      in: query
      description: Filters the proteins that have (`true`) or don't have (`false`) matches to an InterPro entry
      schema:
        type: boolean
    proteinIsFragment:
      name: is_fragment
      in: query
      description: Filters the proteins that are (`true`) or are not (`false`) fragments
      schema:
        type: boolean
    proteinIDA:
      name: ida
      in: query
      description: Gets the IDA of the selected protein.
      schema:
        type: string
        enum:
          - ida
    proteinListIDA:
      name: ida
      in: query
      description: |
        Filters the proteins that follow the domain architecture of a given IDA accession e.g. 44d74765435ca3c68b3d87ebbb680e5498d1a24a
      schema:
        type: string
    proteinID:
      name: id
      in: query
      description: Filters the proteins by its ID. e.g. CYC_HUMAN
      schema:
        type: string
    proteinGOTerm:
      name: go_term
      in: query
      description: Filters the proteins that have been annotated with the given GO term. e.g. GO:0006122
      schema:
        type: string
        pattern: '^[Gg][Oo]:\d{7}$'
    proteinResidues:
      name: residues
      in: query
      description: Gets a JSON with the residues of the selected protein.
      schema:
        type: string
        enum:
          - residues
    proteinStructureinfo:
      name: structureinfo
      in: query
      description: Gets a JSON with the structure information (e.g. Predicted domains) of the selected protein.
      schema:
        type: string
        enum:
          - structureinfo
    proteinExtraFeatures:
      name: extra_features
      in: query
      description: Gets a JSON containing additional features(e.g. mobidb, coil, etc.) of the selected protein.
      schema:
        type: string
        enum:
          - extra_features
    proteinIsoforms:
      name: isoforms
      in: query
      description: Gets a JSON containing the information of existing isoforms (check `Send empty value` option) or data for the specified isoform (e.g. `Q6ZNL6-1`).
      schema:
        type: string
      allowEmptyValue: true
    proteinConservation:
      name: conservation
      in: query
      description: Calculates the conservation per residue of the selected protein using the member database specified.
      schema:
        type: string
        enum:
          - cathgene3d
          - hamap
          - panther
          - pirsf
          - prints
          - prosite
          - profile
          - pfam
          - prodom
          - smart
          - ssf
          - ncbifam
          - cdd
          - sfld
    proteinExtraFields:
      name: extra_fields
      in: query
      description: Includes the value of the selected fields
      schema:
        type: string
        style: form
        allowReserved: true
        explode: false
        enum:
          - counters
          - identifier
          - description
          - sequence
          - gene
          - go_terms
          - evidence_code
          - residues
          - tax_id
          - proteome
          - extra_features
          - structure
          - is_fragment
          - ida_id
          - ida

    structureGroupBy:
      name: group_by
      in: query
      description: |
        Groups the current selection of structures by the given parameter, and counts the unique structures for each group.

        **Note:** This parameter changes the output's format.

        **Note:** This parameter might not play along with other parameters
      schema:
        type: string
        enum:
          - experiment_type
    structureResolution:
      name: resolution
      in: query
      description: |
        Filters the structures by its resolution (in Amstrong).

        The range is given in the format: `[start]-[end]` were both `[start]` and `[end]` are float numbers.
      schema:
        type: string
        pattern: '^\d+(\.\d+)?-\d+(\.\d+)?$'
    structureExperimentType:
      name: experiment_type
      in: query
      description: Filters the structures by the experiment type
      schema:
        type: string
        enum:
          - x-ray
          - nmr
          - em

    structureExtraFields:
      name: extra_fields
      in: query
      description: Include the extra fields in the  payload
      schema:
        type: string
        style: form
        explode: false
        enum:
          - release_date
          - literature
          - chains
          - secondary_structures
          - counters

    taxonomyExtraFields:
      name: extra_fields
      in: query
      description: Include the extra fields in the payload
      schema:
        type: string
        style: form
        explode: false
        enum:
          - counters
          - scientific_name
          - full_name
          - lineage
          - rank
    taxonomyKeySpecies:
      name: key_species
      in: query
      description: |
        Filter tha only includes the selected key species:
        * `39947`: 'Oryza sativa subsp. japonica'
        * `3702`: 'Arabidopsis thaliana'
        * `9606`: 'Homo sapiens'
        * `7955`: 'Danio rerio'
        * `10090`: 'Mus musculus'
        * `7227`: 'Drosophila melanogaster'
        * `6239`: 'Caenorhabditis elegans'
        * `559292`: 'Saccharomyces cerevisiae'
        * `284812`: 'Schizosaccharomyces pombe'
        * `83333`: 'Escherichia coli'
        * `10665`: 'Escherichia virus T4'
        * `2242`: 'Halobacterium salinarum'
      schema:
        type: string
        enum:
          - key_species
    taxonomyWithNames:
      name: with_names
      in: query
      description: |
        Includes an object to the payload where the key is a `tax_id` and the value is its name.

        The names object includes all the taxa mentioned in the payload (i.e. lineage, children and parent).
      schema:
        type: string
        enum:
          - with_names
    taxonomyFilterByEntry:
      name: filter_by_entry
      in: query
      description: |
        A quick access method to get the counters of the selected taxon filtered by the ones which have a match with the given entry.

        e.g. You can find out how many human proteins have a match with IPR000001: `/api/taxonomy/uniprot/9606?filter_by_entry=IPR000001`

        **Note:** The payload already includes the names. It will error if use together with `with_names` or `filter_by_entry_db`
      schema:
        type: string
    taxonomyFilterByEntryDB:
      name: filter_by_entry_db
      in: query
      description: |
        A quick access method to get the counters of the selected taxon filtered by the ones which have a match with the given database.

        e.g. You can find out how many human proteins have a match with a pfam entry  `/api/taxonomy/uniprot/9606?filter_by_entry_db=pfam`

        **Note:** The payload already includes the names. It will error if use together with `with_names` or `filter_by_entry`
      schema:
        type: string

    proteomeGroupBy:
      name: group_by
      in: query
      description: |
        Groups the current selection of proteomes by the given parameter, and counts the unique proteins for each group.

        **Note:** This parameter changes the output's format.

        **Note:** This parameter might not play along with other parameters
      schema:
        type: string
        enum:
          - proteome_is_reference
    proteomeIsReference:
      name: is_reference
      in: query
      description: Filters the list of proteomes by those which are tagged as a reference proteome.
      schema:
        type: string
        enum:
          - is_reference
    proteomeExtraFields:
      name: extra_fields
      in: query
      description: Include the extra fields in the  payload
      schema:
        type: string
        style: form
        explode: false
        enum:
          - counters
          - strain
          - assembly

    setExtraFields:
      name: extra_fields
      in: query
      description: Include the extra fields in the  payload
      schema:
        type: string
        style: form
        explode: false
        enum:
          - counters
          - description
          - relationships
    setAlignments:
      name: alignments
      in: query
      description: |
        Gets a JSON containing the information of the alignments for the current set, for a particular entry (e.g. cd00113)

        If not entry is given it will recover all the alignments. E.g. https://www.ebi.ac.uk/interpro/api/set/cdd/cl00011?alignments
      schema:
        type: string
      allowEmptyValue: true

  responses:
    Aggregations:
      description: A JSON object with aggregating the entities in this endpoint by database
      content:
        application/json:
          schema:
            type: object
    List:
      description: |
        A JSON object that includes a key `results`, which is an list of the filtered values.

        This type of response can be paginated using the `cursor`, `page_size` parameters.
      content:
        application/json:
          schema:
            type: object
    Metadata:
      description: A JSON object that includes a key `metadata`, which is an object with the data related to the selected entity.
      content:
        application/json:
          schema:
            type: object
    ListAndErrors:
      "200":
        $ref: "#/components/responses/Metadata"
      "204":
        $ref: "#/components/responses/NoContent"
      "404":
        $ref: "#/components/responses/NotFound"
      "408":
        $ref: "#/components/responses/Timeout"
      "410":
        $ref: "#/components/responses/Gone"
      "500":
        $ref: "#/components/responses/ServerError"
    AggregationsAndErrors:
      "200":
        $ref: "#/components/responses/Metadata"
      "204":
        $ref: "#/components/responses/NoContent"
      "404":
        $ref: "#/components/responses/NotFound"
      "408":
        $ref: "#/components/responses/Timeout"
      "410":
        $ref: "#/components/responses/Gone"
      "500":
        $ref: "#/components/responses/ServerError"
    MetadataAndErrors:
      "200":
        $ref: "#/components/responses/Metadata"
      "204":
        $ref: "#/components/responses/NoContent"
      "404":
        $ref: "#/components/responses/NotFound"
      "408":
        $ref: "#/components/responses/Timeout"
      "410":
        $ref: "#/components/responses/Gone"
      "500":
        $ref: "#/components/responses/ServerError"

    NoContent:
      description: Empty response. The request is correct but produced an empty dataset.
    NotFound:
      description: Error. The request is incorrect.
    Gone:
      description: Error. The requested entity has been removed from InterPro.
      content:
        application/json:
          schema:
            type: object
    ServerError:
      description: Error. There was an issue in our servers.
    Timeout:
      description: |
        Timeout. The server took too long to process this request. Please notice that:
        * The request is moved to run in the background.
        * If you try again this query you should expect:
          * An almost instant 408, meaning the previous query is still running.
          * The response of the query, if the API has finished the background process.
